#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end

module EnunciateHelpers
  LAMB_CLASS_AWARE = ->(_item) do
    java_clazz = _item['@class']
    clazz_array_parts = java_clazz.split('.')
    short_clazz = clazz_array_parts.pop
    clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
    clazz = clazz_package + "::" + short_clazz
    Object.const_get(clazz).send(:from_json, _item)
  end
end


module Eu

module Pericles

module Spinengine

  # (no documentation provided)
  class DEMRequest 

    # (no documentation provided)
    attr_accessor :repository
    # (no documentation provided)
    attr_accessor :uri
    # (no documentation provided)
    attr_accessor :model
    # (no documentation provided)
    attr_accessor :format

    # the json hash for this DEMRequest
    def to_jaxb_json_hash
      _h = {}
      _h['repository'] = repository.to_jaxb_json_hash unless repository.nil?
      _h['uri'] = uri.to_jaxb_json_hash unless uri.nil?
      _h['model'] = model.to_jaxb_json_hash unless model.nil?
      _h['format'] = format.to_jaxb_json_hash unless format.nil?
      return _h
    end

    # the json (string form) for this DEMRequest
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DEMRequest with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['repository'].nil?
          _oa = _o['repository']
            if(_oa.is_a? Hash)
              @repository = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @repository =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @repository = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @repository.push String.from_json(_item)
                 else
                   @repository.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @repository = _oa
            end
          end
        if !_o['uri'].nil?
          _oa = _o['uri']
            if(_oa.is_a? Hash)
              @uri = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uri =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uri = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uri.push String.from_json(_item)
                 else
                   @uri.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uri = _oa
            end
          end
        if !_o['model'].nil?
          _oa = _o['model']
            if(_oa.is_a? Hash)
              @model = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @model =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @model = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @model.push String.from_json(_item)
                 else
                   @model.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @model = _oa
            end
          end
        if !_o['format'].nil?
          _oa = _o['format']
            if(_oa.is_a? Hash)
              @format = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @format =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @format = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @format.push String.from_json(_item)
                 else
                   @format.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @format = _oa
            end
          end
    end

    # constructs a DEMRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Eu

module Pericles

module Spinengine

  # (no documentation provided)
  class SPINResults 

    # Defined if the output is NOT in JSON format. The model union model (modified original model)
    attr_accessor :model
    # Defined if the output is NOT in JSON format. The model results for constraint checking
    attr_accessor :constraints
    # Defined if the output is NOT in JSON format. The new generated triples.
    attr_accessor :newTriplets
    # The results of the console log
    attr_accessor :consoleLog
    # If Json output specified:  The model union model (modified original model)
    attr_accessor :jsonPERSISTOUT
    # If Json output specified:  The model union model (modified original model)
    attr_accessor :jsonModel
    # If Json output specified:  The new generated triples.
    attr_accessor :jsonNewTriplets
    # If Json output specified:   The model results for constraint checking
    attr_accessor :jsonConstraints

    # the json hash for this SPINResults
    def to_jaxb_json_hash
      _h = {}
      _h['model'] = model.to_jaxb_json_hash unless model.nil?
      _h['constraints'] = constraints.to_jaxb_json_hash unless constraints.nil?
      _h['newTriplets'] = newTriplets.to_jaxb_json_hash unless newTriplets.nil?
      _h['consoleLog'] = consoleLog.to_jaxb_json_hash unless consoleLog.nil?
      _h['jsonPERSISTOUT'] = jsonPERSISTOUT.to_jaxb_json_hash unless jsonPERSISTOUT.nil?
      _h['jsonModel'] = jsonModel.to_jaxb_json_hash unless jsonModel.nil?
      _h['jsonNewTriplets'] = jsonNewTriplets.to_jaxb_json_hash unless jsonNewTriplets.nil?
      _h['jsonConstraints'] = jsonConstraints.to_jaxb_json_hash unless jsonConstraints.nil?
      return _h
    end

    # the json (string form) for this SPINResults
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this SPINResults with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['model'].nil?
          _oa = _o['model']
            if(_oa.is_a? Hash)
              @model = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @model =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @model = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @model.push String.from_json(_item)
                 else
                   @model.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @model = _oa
            end
          end
        if !_o['constraints'].nil?
          _oa = _o['constraints']
            if(_oa.is_a? Hash)
              @constraints = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @constraints =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @constraints = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @constraints.push String.from_json(_item)
                 else
                   @constraints.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @constraints = _oa
            end
          end
        if !_o['newTriplets'].nil?
          _oa = _o['newTriplets']
            if(_oa.is_a? Hash)
              @newTriplets = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @newTriplets =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @newTriplets = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @newTriplets.push String.from_json(_item)
                 else
                   @newTriplets.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @newTriplets = _oa
            end
          end
        if !_o['consoleLog'].nil?
          _oa = _o['consoleLog']
            if(_oa.is_a? Hash)
              @consoleLog = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @consoleLog =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @consoleLog = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @consoleLog.push String.from_json(_item)
                 else
                   @consoleLog.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @consoleLog = _oa
            end
          end
        if !_o['jsonPERSISTOUT'].nil?
          _oa = _o['jsonPERSISTOUT']
            if(_oa.is_a? Hash)
              @jsonPERSISTOUT = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jsonPERSISTOUT =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jsonPERSISTOUT = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jsonPERSISTOUT.push String.from_json(_item)
                 else
                   @jsonPERSISTOUT.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jsonPERSISTOUT = _oa
            end
          end
        if !_o['jsonModel'].nil?
          _oa = _o['jsonModel']
            if(_oa.is_a? Hash)
              @jsonModel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jsonModel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jsonModel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jsonModel.push String.from_json(_item)
                 else
                   @jsonModel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jsonModel = _oa
            end
          end
        if !_o['jsonNewTriplets'].nil?
          _oa = _o['jsonNewTriplets']
            if(_oa.is_a? Hash)
              @jsonNewTriplets = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jsonNewTriplets =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jsonNewTriplets = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jsonNewTriplets.push String.from_json(_item)
                 else
                   @jsonNewTriplets.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jsonNewTriplets = _oa
            end
          end
        if !_o['jsonConstraints'].nil?
          _oa = _o['jsonConstraints']
            if(_oa.is_a? Hash)
              @jsonConstraints = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @jsonConstraints =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @jsonConstraints = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @jsonConstraints.push String.from_json(_item)
                 else
                   @jsonConstraints.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @jsonConstraints = _oa
            end
          end
    end

    # constructs a SPINResults from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end
